# Python3 implementation of Best - Fit algorithm

# Function to allocate memory to blocks
# as per Best fit algorithm
def bestFit(blockSize, m, processSize, n):

    # Stores block id of the block
    # allocated to a process
    allocation = [-1] * n

    # pick each process and find suitable
    # blocks according to its size ad
    # assign to it
    for i in range(n):
        
        # Find the best fit block for
        # current process
        bestIdx=-1
        for j in range(m):
            # j=4
            # 600>=212 true
            if blockSize[j] >= processSize[i]:
                # yes
                if bestIdx == -1:
                    # 3
                    bestIdx = j
                    # 300>600
                elif blockSize[bestIdx] > blockSize[j]:
                    # bestidx=3
                    bestIdx = j

        # If we could find a block for
        # current process
        if bestIdx != -1:

            # allocate block j to p[i] process
            allocation[i] = bestIdx

            # Reduce available memory in this block.
            blockSize[bestIdx] -= processSize[i]

    print("Process No. Process Size	 Block no.")
    for i in range(n):
        print(i + 1, "		 ", processSize[i],
              end="		 ")
        if allocation[i] != -1:
            print(allocation[i] + 1)
        else:
            print("Not Allocated")


# Driver code
# if __name__ == '__main__':
print("Enter no. of blocksize")
a=int(input())
print("Enter",a,"blocksize elements")
blockSize=[]
for i in range(a):
   blockSize.append(int(input()))
print("Blocksize:",blockSize)
# blockSize = [100, 500, 200, 300, 600]

print("Enter no. of processSize")
b=int(input())
print("Enter",b,"processsize elements")
processSize=[]
for i in range(b):
   processSize.append(int(input()))
print("processSize:",processSize)
# processSize = [212, 417, 112, 426]

m = len(blockSize)
n = len(processSize)
bestFit(blockSize, m, processSize, n)